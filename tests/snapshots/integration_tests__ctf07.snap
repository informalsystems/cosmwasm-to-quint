---
source: tests/integration_tests.rs
expression: output
---
module oaksecurity_cosmwasm_ctf_07 {
  
  import basicSpells.* from "../lib/basicSpells"
  import cw_types.* from "../lib/cw_types"
  import messaging.* from "../lib/messaging"
  import bank from "../lib/bank"

  
  var contract_state: ContractState
  var return: Result
  var bank: bank::Bank
  var time: int

  
  pure val CONTRACT_ADDRESS = "<contract>"

  
  pure val ADDRESSES = Set("s1", "s2", "s3", CONTRACT_ADDRESS)
  pure val DENOMS = Set("d1", "uawesome")
  pure val MAX_AMOUNT = 200


  type InstantiateMsg = { owner: str, threshold: int }
  type ConfigQueryResponse = { owner: Addr, threshold: int }
  type ExecuteMsg =
    | ExecuteMsg_Deposit
    | ExecuteMsg_Withdraw({ amount: int })
    | ExecuteMsg_OwnerAction({ msg: CosmosMsg })
    | ExecuteMsg_UpdateConfig({ new_threshold: int })
  pure def instantiate(state: ContractState, _env: Env, _info: MessageInfo, msg: InstantiateMsg): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
  pure def execute(state: ContractState, _env: Env, info: MessageInfo, msg: ExecuteMsg): (Result[Response, ContractError], ContractState) = match msg {
    | ExecuteMsg_Deposit(__r) => deposit(state, info)
    | ExecuteMsg_Withdraw(__r) => withdraw(state, info, __r.amount)
    | ExecuteMsg_OwnerAction(__r) => owner_action(state, info, __r.msg)
    | ExecuteMsg_UpdateConfig(__r) => update_config(state, info, __r.new_threshold)
  }
  pure def deposit(state: ContractState, info: MessageInfo): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
                            
  action deposit_action = {
    // TODO: Change next line according to fund expectations
    pure val max_funds = MAX_AMOUNT
    nondet message: ExecuteMsg = ExecuteMsg_Deposit.oneOf()
    execute_message(message, max_funds)
  }
  pure def withdraw(state: ContractState, info: MessageInfo, amount: int): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
                            
  action withdraw_action = {
    // TODO: Change next line according to fund expectations
    pure val max_funds = MAX_AMOUNT
    nondet message_amount: int = 0.to(MAX_AMOUNT).oneOf()
    pure val message: ExecuteMsg = ExecuteMsg_Withdraw({ amount: message_amount })
    execute_message(message, max_funds)
  }
  pure def update_config(state: ContractState, info: MessageInfo, new_threshold: int): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
                            
  action update_config_action = {
    // TODO: Change next line according to fund expectations
    pure val max_funds = MAX_AMOUNT
    nondet message_new_threshold: int = 0.to(MAX_AMOUNT).oneOf()
    pure val message: ExecuteMsg = ExecuteMsg_UpdateConfig({ new_threshold: message_new_threshold })
    execute_message(message, max_funds)
  }
  pure def owner_action(state: ContractState, info: MessageInfo, msg: CosmosMsg): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
                            
  action owner_action_action = {
    // TODO: Change next line according to fund expectations
    pure val max_funds = MAX_AMOUNT
    nondet message_msg: CosmosMsg = <missing-nondet-value>.oneOf()
    pure val message: ExecuteMsg = ExecuteMsg_OwnerAction({ msg: message_msg })
    execute_message(message, max_funds)
  }
  pure val DENOM = "uawesome"

  type ContractState = {
    top_depositor: Addr,
  owner: Addr,
  threshold: int,
  balances: Addr -> int
  }

  pure val init_contract_state = {
        top_depositor: "s1",
    owner: "s1",
    threshold: 0,
    balances: Map()
  }

  action execute_step = all {
    any {
      deposit_action,
      withdraw_action,
      update_config_action,
      owner_action_action
    },
    advance_time,
  }


  pure def reply(state: ContractState, _env: Env, _reply: Reply): (Result, ContractState) = (Ok(Response_new), state)



  pure val init_bank_state = ADDRESSES.mapBy(_ => DENOMS.mapBy(_ => MAX_AMOUNT))

  val env_val = { block: { time: time } }

  action init = all {
    contract_state' = init_contract_state,
    bank' = init_bank_state,
    return' = Err("No previous request"),
    time' = 0,
  }


  action execute_message(message, max_funds) = {
    nondet sender = ADDRESSES.oneOf()
    nondet denom = DENOMS.oneOf()
    nondet amount = 0.to(max_funds).oneOf()
    val funds = [{ denom: denom, amount: amount }]
    val info = { sender: sender, funds: funds }

    val r = execute(contract_state, env_val, info, message)
    all {
      bank.get(sender).get(denom) >= amount,
      bank' = bank.setBy(sender, balances => balances.setBy(denom, balance => balance - amount))
                  .setBy(CONTRACT_ADDRESS, balances => balances.setBy(denom, balance => balance + amount)),
      return' = r._1,
      contract_state' = r._2,
    }
  }

  action advance_time = time' = time + 1

  action step = {
    val message_getting = get_message(return)
    val new_return = message_getting._1
    val opt_message = message_getting._2
    match opt_message {
      | Some(submsg) => {
          val current_state = { bank: bank, return: new_return, contract_state: contract_state }
          val new_state = process_message(current_state, env_val, CONTRACT_ADDRESS, submsg, reply)
          all {
            bank' = new_state.bank,
            return' = new_state.return,
            contract_state' = new_state.contract_state,
            advance_time,
          }
      }
      | None => execute_step
    }
  }

}
