---
source: tests/integration_tests.rs
expression: output
---
quint:


oaksecurity_cosmwasm_ctf_09_stubs.qnt:
module oaksecurity_cosmwasm_ctf_09 {
  
  import basicSpells.* from "./lib/basicSpells"
  import cw_types.* from "./lib/cw_types"
  import cw_utils.* from "./lib/cw_utils"
  import messaging.* from "./lib/messaging"
  import bank from "./lib/bank"

  
  var contract_state: ContractState
  var result: Result
  var bank: bank::Bank
  var time: int

  
  pure val CONTRACT_ADDRESS = "contract0"

  
  pure val ADDRESSES = Set("sender1", "sender2", "sender3", CONTRACT_ADDRESS)
  pure val DENOMS = Set("d1", "uawesome")
  pure val MAX_AMOUNT = 200


  type InstantiateMsg = {  }
  type State = { owner: Addr, total_staked: int, global_index: int }
  type UserRewardInfo = { staked_amount: int, user_index: int, pending_rewards: int }
  type ExecuteMsg =
    | ExecuteMsg_IncreaseReward
    | ExecuteMsg_Deposit
    | ExecuteMsg_Withdraw({ amount: int })
    | ExecuteMsg_ClaimRewards
  pure def instantiate(state: ContractState, _env: Env, info: MessageInfo, _msg: InstantiateMsg): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
  pure def execute(state: ContractState, env: Env, info: MessageInfo, msg: ExecuteMsg): (Result[Response, ContractError], ContractState) = match msg {
    | ExecuteMsg_IncreaseReward(__r) => increase_reward(state, env, info)
    | ExecuteMsg_Deposit(__r) => deposit(state, info)
    | ExecuteMsg_Withdraw(__r) => withdraw(state, info, __r.amount)
    | ExecuteMsg_ClaimRewards(__r) => claim_rewards(state, info)
  }
  pure def increase_reward(state: ContractState, _env: Env, info: MessageInfo): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
                            
  action increase_reward_action = {
    // TODO: Change next line according to fund expectations
    pure val max_funds = MAX_AMOUNT
    
    pure val message: ExecuteMsg = ExecuteMsg_IncreaseReward
    execute_message(message, max_funds)
  }
  pure def deposit(state: ContractState, info: MessageInfo): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
                            
  action deposit_action = {
    // TODO: Change next line according to fund expectations
    pure val max_funds = MAX_AMOUNT
    
    pure val message: ExecuteMsg = ExecuteMsg_Deposit
    execute_message(message, max_funds)
  }
  pure def withdraw(state: ContractState, info: MessageInfo, amount: int): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
                            
  action withdraw_action = {
    // TODO: Change next line according to fund expectations
    pure val max_funds = MAX_AMOUNT
    nondet message_amount: int = 0.to(MAX_AMOUNT).oneOf()
    pure val message: ExecuteMsg = ExecuteMsg_Withdraw({ amount: message_amount })
    execute_message(message, max_funds)
  }
  pure def claim_rewards(state: ContractState, info: MessageInfo): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
                            
  action claim_rewards_action = {
    // TODO: Change next line according to fund expectations
    pure val max_funds = MAX_AMOUNT
    
    pure val message: ExecuteMsg = ExecuteMsg_ClaimRewards
    execute_message(message, max_funds)
  }
  pure val DENOM = "uawesome"
  pure val REWARD_DENOM = "uoak"

  type ContractState = {
    state: State,
  users: Addr -> UserRewardInfo
  }

  pure val init_contract_state = {
        state: { owner: "s1",total_staked: 0,global_index: 0 },
    users: Map()
  }

  action execute_step = all {
    any {
      increase_reward_action,
      deposit_action,
      withdraw_action,
      claim_rewards_action
    },
    advance_time,
  }


  pure def reply(state: ContractState, _env: Env, _reply: Reply): (Result, ContractState) = (Ok(Response_new), state)



  pure val init_bank_state = ADDRESSES.mapBy(_ => DENOMS.mapBy(_ => MAX_AMOUNT))

  val env_val = { block: { time: time } }

  action init = {
    // TODO: Change next line according to fund expectations
    pure val max_funds = 0

    nondet sender = Set("admin").oneOf()
    nondet denom = DENOMS.oneOf()
    nondet amount = 0.to(max_funds).oneOf()
    val funds = [{ denom: denom, amount: amount }]
    val info = { sender: sender, funds: funds }

    pure val message: InstantiateMsg = {  }
    pure val r = instantiate(init_contract_state, { block: { time: 0 } }, info, message)

    all {
      contract_state' = r._2,
      bank' = init_bank_state,
      result' = r._1,
      time' = 0,
    }
  }


  action execute_message(message, max_funds) = {
    nondet sender = ADDRESSES.oneOf()
    nondet denom = DENOMS.oneOf()
    nondet amount = 0.to(max_funds).oneOf()
    val funds = [{ denom: denom, amount: amount }]
    val info = { sender: sender, funds: funds }

    val r = execute(contract_state, env_val, info, message)
    all {
      bank.get(sender).get(denom) >= amount,
      match r._1 {
        | Ok(_) => bank' = bank.setBy(sender, balances => balances.setBy(denom, balance => balance - amount))
                               .setBy(CONTRACT_ADDRESS, balances => balances.setBy(denom, balance => balance + amount))
        | Err(_) => bank' = bank
      },
      result' = r._1,
      contract_state' = r._2,
    }
  }

  action advance_time = time' = time + 1

  action step = {
    val message_getting = get_message(result)
    val new_result = message_getting._1
    val opt_message = message_getting._2
    match opt_message {
      | Some(submsg) => {
          val current_state = { bank: bank, result: new_result, contract_state: contract_state }
          val new_state = process_message(current_state, env_val, CONTRACT_ADDRESS, submsg, reply)
          all {
            bank' = new_state.bank,
            result' = new_state.result,
            contract_state' = new_state.contract_state,
            advance_time,
          }
      }
      | None => execute_step
    }
  }

}


mbt:
mbt_oaksecurity_cosmwasm_ctf_09.rs:

pub mod state_structs {
    use num_bigint::BigInt;
    use serde::Deserialize;
    use std::collections::HashMap;
    use itf::de::{self, As};
    #[derive(Clone, Debug, Deserialize)]
  pub struct InstantiateMsg {

    }

    #[derive(Clone, Debug, Deserialize)]
  pub struct State {
        pub owner: String,
        pub total_staked: BigInt,
        pub global_index: BigInt
    }

    #[derive(Clone, Debug, Deserialize)]
  pub struct UserRewardInfo {
        pub staked_amount: BigInt,
        pub user_index: BigInt,
        pub pending_rewards: BigInt
    }

    #[derive(Clone, Debug, Deserialize)]
  pub struct ContractState {
        pub state: State,
        pub users: HashMap<String, UserRewardInfo>
    }

    #[derive(Clone, Debug, Deserialize)]
  pub struct NondetPicks {

        #[serde(with = "As::<de::Option::<_>>")]
        pub sender: Option<String>,

        #[serde(with = "As::<de::Option::<_>>")]
        pub denom: Option<String>,

        #[serde(with = "As::<de::Option::<_>>")]
        pub amount: Option<BigInt>,

        #[serde(with = "As::<de::Option::<_>>")]
        pub message_amount: Option<BigInt>
    }


    #[derive(Clone, Debug, Deserialize)]
    pub struct Message {}

    #[derive(Clone, Debug, Deserialize)]
    pub struct Response {
        pub messages: Vec<Message>,
    }

    #[derive(Clone, Debug, Deserialize)]
    pub struct State {
        pub contract_state: ContractState,
        pub bank: HashMap<String, HashMap<String, BigInt>>,
        #[serde(with = "As::<de::Result::<_, _>>")]
        pub result: Result<Response, String>,
        pub action_taken: String,
        pub nondet_picks: NondetPicks,
        pub time: BigInt,
    }

}
#[cfg(test)]
pub mod tests {
    use oaksecurity_cosmwasm_ctf_09::contract;
    use oaksecurity_cosmwasm_ctf_09::msg::{ExecuteMsg, InstantiateMsg, QueryMsg};


    use crate::state_structs::*;
    use cosmwasm_std::{coin, Addr, Uint128};
    use cw_multi_test::{App, AppResponse, ContractWrapper, Executor};
    use itf::trace_from_str;
    use num_bigint::BigInt;
    use num_traits::{ToPrimitive, Zero};

    pub const DENOM: &str = "uawesome";
    pub const TICK: u64 = 1;

    pub fn mint_tokens(mut app: App, recipient: String, denom: String, amount: Uint128) -> App {
        app.sudo(cw_multi_test::SudoMsg::Bank(
            cw_multi_test::BankSudo::Mint {
                to_address: recipient.to_owned(),
                amount: vec![coin(amount.u128(), denom)],
            },
        ))
        .unwrap();
        app
    }

    fn compare_state(test_state: &TestState, app: &App, state: &State) {
        // compare contract balances
        let balance = app
            .wrap()
            .query_balance(&test_state.contract_addr, DENOM)
            .unwrap()
            .amount;
        let trace_balance = state
            .bank
            .get(&test_state.contract_addr.to_string())
            .and_then(|x| x.get(DENOM))
            .and_then(|x| x.to_u128())
            .unwrap_or(0);
        println!(
            "Contract balance ({:?}) for {DENOM}: {:?} vs {:?}",
            test_state.contract_addr,
            balance,
            Uint128::new(trace_balance)
        );
        assert_eq!(balance, Uint128::new(trace_balance));

        // TODO: Query the contract and compare the state as you wish
    }

    fn compare_result(
        trace_result: Result<Response, String>,
        app_result: Result<AppResponse, anyhow::Error>,
    ) {
        if trace_result.is_ok() {
            assert!(
                app_result.is_ok(),
                "Action unexpectedly failed, error: {:?}",
                app_result.err()
            );
            println!("Action successful as expected");
        } else {
            assert!(
                app_result.is_err(),
                "Expected action to fail with error: {:?}",
                trace_result.err()
            );
            println!("Action failed as expected");
        }
    }

    fn funds_from_trace(amount: Option<BigInt>, denom: Option<String>) -> Vec<cosmwasm_std::Coin> {
        if amount.is_none() || denom.is_none() || amount == Some(Zero::zero()) {
            return vec![];
        }

        vec![coin(
            amount.as_ref().unwrap().to_u128().unwrap(),
            denom.unwrap(),
        )]
    }

    // Testing is stateful.
    struct TestState {
        // we will only know the contract address once we have processed an `instantiate` step
        pub contract_addr: Addr,
    }

    #[test]
    fn model_test() {
        let mut app = App::default();
        let code = ContractWrapper::new(contract::execute, contract::instantiate, contract::query);
        let code_id = app.store_code(Box::new(code));

        // create test state
        let mut test_state = TestState {
            contract_addr: Addr::unchecked("contract0"),
        };

        // load trace data
        let data = include_str!("../quint/test.itf.json");
        let trace: itf::Trace<State> = trace_from_str(data).unwrap();

        for s in trace.states {
            let last_result = s.value.result.clone();
            if last_result.is_ok() && !last_result.unwrap().messages.is_empty() {
                println!("Processing messages, skipping");
                continue;
            }

            let action_taken = &s.value.action_taken;
            let nondet_picks = &s.value.nondet_picks;
            let amount = nondet_picks.amount.clone();
            let denom = nondet_picks.denom.clone();
            let sender = nondet_picks.sender.clone();

            println!("Step number: {:?}", s.meta.index);

            match action_taken.as_str() {


               "claim_rewards_action" => {
                    let sender = Addr::unchecked(sender.unwrap());
                    let funds = funds_from_trace(amount, denom);


                    let msg = ExecuteMsg::ClaimRewards {  };
                    println!("Message: {:?}", msg);
                    println!("Sender: {:?}", sender);
                    println!("Funds: {:?}", funds);

                    let res = app.execute_contract(
                        sender,
                        test_state.contract_addr.clone(),
                        &msg,
                        &funds,
                    );

                    compare_result(s.value.result.clone(), res)
                }


               "deposit_action" => {
                    let sender = Addr::unchecked(sender.unwrap());
                    let funds = funds_from_trace(amount, denom);


                    let msg = ExecuteMsg::Deposit {  };
                    println!("Message: {:?}", msg);
                    println!("Sender: {:?}", sender);
                    println!("Funds: {:?}", funds);

                    let res = app.execute_contract(
                        sender,
                        test_state.contract_addr.clone(),
                        &msg,
                        &funds,
                    );

                    compare_result(s.value.result.clone(), res)
                }


               "increase_reward_action" => {
                    let sender = Addr::unchecked(sender.unwrap());
                    let funds = funds_from_trace(amount, denom);


                    let msg = ExecuteMsg::IncreaseReward {  };
                    println!("Message: {:?}", msg);
                    println!("Sender: {:?}", sender);
                    println!("Funds: {:?}", funds);

                    let res = app.execute_contract(
                        sender,
                        test_state.contract_addr.clone(),
                        &msg,
                        &funds,
                    );

                    compare_result(s.value.result.clone(), res)
                }


               "q::init" => {
                    println!("Initializing contract.");

                    let sender = Addr::unchecked(sender.unwrap());
                    let funds = funds_from_trace(amount, denom);

                    let msg = InstantiateMsg {  };
                    println!("Message: {:?}", msg);
                    println!("Sender: {:?}", sender);
                    println!("Funds: {:?}", funds);

                    test_state.contract_addr = app.instantiate_contract(
                        code_id,
                        sender,
                        &msg,
                        &funds,
                        "test",
                        None,
                    ).unwrap();

                    for (addr, coins) in s.value.bank.clone().iter() {
                        for (denom, amount) in coins.iter() {
                            app = mint_tokens(
                                app,
                                addr.clone(),
                                denom.to_string(),
                                Uint128::new(amount.to_u128().unwrap()),
                            );
                        }
                    }

               }



               "withdraw_action" => {
                    let sender = Addr::unchecked(sender.unwrap());
                    let funds = funds_from_trace(amount, denom);

                   let message_amount = nondet_picks.message_amount.clone().unwrap().to_u64().unwrap().into();
                    let msg = ExecuteMsg::Withdraw { amount: message_amount };
                    println!("Message: {:?}", msg);
                    println!("Sender: {:?}", sender);
                    println!("Funds: {:?}", funds);

                    let res = app.execute_contract(
                        sender,
                        test_state.contract_addr.clone(),
                        &msg,
                        &funds,
                    );

                    compare_result(s.value.result.clone(), res)
                }

                _ => panic!("Invalid action taken"),
            }
            compare_state(&test_state, &app, &(s.value.clone()));
            println!(
                "clock is advancing for {} seconds",
                TICK
            );
            app.update_block(|block| {
                block.time = block.time.plus_seconds(TICK);
            });
            println!("-----------------------------------");
        }
    }
}
