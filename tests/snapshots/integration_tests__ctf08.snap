---
source: tests/integration_tests.rs
expression: output
---
module oaksecurity_cosmwasm_ctf_08 {
  
  import basicSpells.* from "../lib/basicSpells"
  import cw_types.* from "../lib/cw_types"
  import messaging.* from "../lib/messaging"
  import bank from "../lib/bank"

  
  var contract_state: ContractState
  var return: Result
  var bank: bank::Bank
  var time: int

  
  pure val CONTRACT_ADDRESS = "<contract>"

  
  pure val ADDRESSES = Set("s1", "s2", "s3", CONTRACT_ADDRESS)
  pure val DENOMS = Set("d1", "uawesome")
  pure val MAX_AMOUNT = 200


  type InstantiateMsg = { nft_address: str }
  type GetCountResponse = { count: int }
  type Config = { nft_contract: Addr }
  type Sale = { nft_id: str, price: int, owner: Addr, tradable: bool }
  type Trade = { asked_id: str, to_trade_id: str, trader: Addr }
  type Operations = { n_trades: int, n_sales: int }
  type ExecuteMsg =
    | ExecuteMsg_BuyNFT({ id: str })
    | ExecuteMsg_NewSale({ id: str, price: int, tradable: bool })
    | ExecuteMsg_CancelSale({ id: str })
    | ExecuteMsg_NewTrade({ target: str, offered: str })
    | ExecuteMsg_AcceptTrade({ id: str, trader: str })
    | ExecuteMsg_CancelTrade({ id: str })
  pure def instantiate(state: ContractState, _env: Env, _info: MessageInfo, msg: InstantiateMsg): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
  pure def execute(state: ContractState, env: Env, info: MessageInfo, msg: ExecuteMsg): (Result[Response, ContractError], ContractState) = match msg {
    | ExecuteMsg_BuyNFT(__r) => exec_buy(state, env, info, __r.id)
    | ExecuteMsg_NewSale(__r) => exec_new_sale(state, env, info, __r.id, __r.price, __r.tradable)
    | ExecuteMsg_CancelSale(__r) => exec_cancel_sale(state, info, __r.id)
    | ExecuteMsg_NewTrade(__r) => exec_new_trade(state, env, info, __r.target, __r.offered)
    | ExecuteMsg_AcceptTrade(__r) => exec_accept_trade(state, info, __r.id, __r.trader)
    | ExecuteMsg_CancelTrade(__r) => exec_cancel_trade(state, info, __r.id)
  }
  pure def exec_new_sale(state: ContractState, env: Env, info: MessageInfo, id: str, price: int, tradable: bool): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
                            
  action exec_new_sale_action = {
    // TODO: Change next line according to fund expectations
    pure val max_funds = MAX_AMOUNT
    nondet message_id: str = Set("s1", "s2", "s3").oneOf()
    nondet message_price: int = 0.to(MAX_AMOUNT).oneOf()
    nondet message_tradable: bool = Bool.oneOf()
    pure val message: ExecuteMsg = ExecuteMsg_NewSale({ id: message_id, price: message_price, tradable: message_tradable })
    execute_message(message, max_funds)
  }
  pure def exec_buy(state: ContractState, _env: Env, info: MessageInfo, id: str): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
                            
  action exec_buy_action = {
    // TODO: Change next line according to fund expectations
    pure val max_funds = MAX_AMOUNT
    nondet message_id: str = Set("s1", "s2", "s3").oneOf()
    pure val message: ExecuteMsg = ExecuteMsg_BuyNFT({ id: message_id })
    execute_message(message, max_funds)
  }
  pure def exec_cancel_sale(state: ContractState, info: MessageInfo, id: str): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
                            
  action exec_cancel_sale_action = {
    // TODO: Change next line according to fund expectations
    pure val max_funds = MAX_AMOUNT
    nondet message_id: str = Set("s1", "s2", "s3").oneOf()
    pure val message: ExecuteMsg = ExecuteMsg_CancelSale({ id: message_id })
    execute_message(message, max_funds)
  }
  pure def exec_new_trade(state: ContractState, env: Env, info: MessageInfo, asked_id: str, offered_id: str): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
                            
  action exec_new_trade_action = {
    // TODO: Change next line according to fund expectations
    pure val max_funds = MAX_AMOUNT
    nondet message_target: str = Set("s1", "s2", "s3").oneOf()
    nondet message_offered: str = Set("s1", "s2", "s3").oneOf()
    pure val message: ExecuteMsg = ExecuteMsg_NewTrade({ target: message_target, offered: message_offered })
    execute_message(message, max_funds)
  }
  pure def exec_accept_trade(state: ContractState, info: MessageInfo, asked_id: str, trader: str): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
                            
  action exec_accept_trade_action = {
    // TODO: Change next line according to fund expectations
    pure val max_funds = MAX_AMOUNT
    nondet message_id: str = Set("s1", "s2", "s3").oneOf()
    nondet message_trader: str = Set("s1", "s2", "s3").oneOf()
    pure val message: ExecuteMsg = ExecuteMsg_AcceptTrade({ id: message_id, trader: message_trader })
    execute_message(message, max_funds)
  }
  pure def exec_cancel_trade(state: ContractState, info: MessageInfo, asked_id: str): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
                            
  action exec_cancel_trade_action = {
    // TODO: Change next line according to fund expectations
    pure val max_funds = MAX_AMOUNT
    nondet message_id: str = Set("s1", "s2", "s3").oneOf()
    pure val message: ExecuteMsg = ExecuteMsg_CancelTrade({ id: message_id })
    execute_message(message, max_funds)
  }
  pure def reply(state: ContractState, _env: Env, reply: Reply): (Result[Response, ContractError], ContractState) = (Ok(Response_new), state)
  pure val DENOM = "uawesome"
  pure val TRADE_REPLY = 1
  pure val SALE_REPLY = 2

  type ContractState = {
    config: Config,
  sales: str -> Sale,
  trades: str -> Trade,
  operations: Operations
  }

  pure val init_contract_state = {
        config: { nft_contract: "s1" },
    sales: Map(),
    trades: Map(),
    operations: { n_trades: 0,n_sales: 0 }
  }

  action execute_step = all {
    any {
      exec_new_sale_action,
      exec_buy_action,
      exec_cancel_sale_action,
      exec_new_trade_action,
      exec_accept_trade_action,
      exec_cancel_trade_action
    },
    advance_time,
  }



  pure val init_bank_state = ADDRESSES.mapBy(_ => DENOMS.mapBy(_ => MAX_AMOUNT))

  val env_val = { block: { time: time } }

  action init = all {
    contract_state' = init_contract_state,
    bank' = init_bank_state,
    return' = Err("No previous request"),
    time' = 0,
  }


  action execute_message(message, max_funds) = {
    nondet sender = ADDRESSES.oneOf()
    nondet denom = DENOMS.oneOf()
    nondet amount = 0.to(max_funds).oneOf()
    val funds = [{ denom: denom, amount: amount }]
    val info = { sender: sender, funds: funds }

    val r = execute(contract_state, env_val, info, message)
    all {
      bank.get(sender).get(denom) >= amount,
      bank' = bank.setBy(sender, balances => balances.setBy(denom, balance => balance - amount))
                  .setBy(CONTRACT_ADDRESS, balances => balances.setBy(denom, balance => balance + amount)),
      return' = r._1,
      contract_state' = r._2,
    }
  }

  action advance_time = time' = time + 1

  action step = {
    val message_getting = get_message(return)
    val new_return = message_getting._1
    val opt_message = message_getting._2
    match opt_message {
      | Some(submsg) => {
          val current_state = { bank: bank, return: new_return, contract_state: contract_state }
          val new_state = process_message(current_state, env_val, CONTRACT_ADDRESS, submsg, reply)
          all {
            bank' = new_state.bank,
            return' = new_state.return,
            contract_state' = new_state.contract_state,
            advance_time,
          }
      }
      | None => execute_step
    }
  }

}
